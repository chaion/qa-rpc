TestSet	execute	usePreparedData	testDescription	id	method	params	runtimeVal	storeVariables	preStoreVariables
smoke avm deploy simple contract									
			prepare a avm contract named SimpleContract.jar	avmSimple_prepare	helper.newAVMContract	[testContracts/SimpleContract.jar]			testAcc=0xa07e185919beef1e0a79fea78fcfabc24927c5067d758e514ad74b905a2bf137
			unlock test account	avmSimple_unlock	requestMethod.personal_unlockAccount	[_testAcc,password,60]			
		x	send Dapp deployment tx	avmSimple_deploy	requestMethod.eth_sendTransaction	[{from:_testAcc,gas:0x4c4b40}]		result=>txHash	
			get contract address	avmSimple_storeContractAddress	requestMethod.eth_getTransactionReceipt	[_txHash]			
			prepare simpleContract main function	avmSimple_simpleMain	helper.callAVMMethod	[xx]			
		x	call simpleContract main	avmSimple_call	requestMethod.eth_call	[{from:_testAcc,to:_contractAddress}]			
			validate return value/view the log for debug info	avmSimple_validate	validFormat	[equal,0x]			
									
smoke avm deploy ByteArrayHolder contract									
			prepare a avm contract named ByteArrayHolder.jar	avmByteArr_prepare	helper.newAVMContract	[testContracts/ByteArrayHolder.jar]			testAcc=0xa07e185919beef1e0a79fea78fcfabc24927c5067d758e514ad74b905a2bf137
			unlock test account	avmByteArr_unlock	requestMethod.personal_unlockAccount	[_testAcc,password,60]			
		x	send Dapp deployment tx	avmByteArr_deploy	requestMethod.eth_sendTransaction	[{from:_testAcc,gas:0x4c4b40}]			
			get contract address	avmByteArr_storeContractAddr	requestMethod.eth_getTransactionReceipt	[_txHash]		result=>txHash	
			prepare ByteArrayHolder main function	avmByteArr_prepareMain	helper.callAVMMethod	[xxx]			
		x	call ByteArrayHolder main	avmByteArr_call	requestMethod.eth_call	[{from:_testAcc,to:_contractAddress}]			
			validate return value//view the log for debug info	avmByteArr_validate	validFormat	[equal,0x0102]			
									
smoke avm deploy AvmCrossCallDispatcher									
			prepare a avm contract named AvmCrossCallDispater.jar	AvmCrossCallDispater_prepare	helper.newAVMContract	[testContracts/AvmCrossCallDispatcher.jar]			testAcc=0xa07e185919beef1e0a79fea78fcfabc24927c5067d758e514ad74b905a2bf137
			unlock test account	AvmCrossCallDispater_unlock	requestMethod.personal_unlockAccount	[_testAcc,password,60]			
		x	send Dapp deployment tx	AvmCrossCallDispater_deploy	requestMethod.eth_sendTransaction	[{from:_testAcc,gas:0x4c4b40}]		result=>txHash	
			get contract address	AvmCrossCallDispater_storeContractAddr	requestMethod.eth_getTransactionReceipt	[_txHash]			
			prepare AvmCrossCallDispater main function	AvmCrossCallDispater_prepareMain	helper.callAVMMethod	[xxx,[address,string],[0xa07e185919beef1e0a79fea78fcfabc24927c5067d758e514ad74b905a2bf000,lalala]]			
		x	call AvmCrossCallDispater main	AvmCrossCallDispater_call	requestMethod.eth_call	[{from:_testAcc,to:_contractAddress}]			
			validate return value//view the log for debug info	AvmCrossCallDispater_validate	validFormat	[equal,0x]			
									
avm test log event â€“ Counter.jar									
			prepare a avm contract named Counter.jar	Counter_prepare	helper.newAVMContract	[testContracts/Counter.jar]			testAcc=0xa07e185919beef1e0a79fea78fcfabc24927c5067d758e514ad74b905a2bf137
			unlock test account	Counter_unlock	requestMethod.personal_unlockAccount	[_testAcc,password,60]			
		x	send Dapp deployment tx	Counter_deploy	requestMethod.eth_sendTransaction	[{from:_testAcc,gas:0x4c4b40}]		result=>txHash	
			get contract address	Counter_storeContractAddr	requestMethod.eth_getTransactionReceipt	[_txHash]			
			prepare Counter increment(8) function	Counter_prepareinc	helper.callAVMMethod	[incrementCounter,[int],[8]]			
		x	call increment(8) main	Counter_sendInc	requestMethod.eth_sendTransaction	[{from:_testAcc,to:_contractAddress}]		result=>txHash	
			getRecipt/review log manually	Counter_incRpt	requestMethod.eth_getTransactionReceipt	[_txHash]			
			prepare Counter getCount function	Counter_preparegetCount	helper.callAVMMethod	[getCount]			
		x	call getCount	Counter_sendgetCount	requestMethod.eth_call	[{from:_testAcc,to:_contractAddress}]			
			validate return value//view the log for debug info	Counter_validate	validFormat	[equal,0x08]			
			prepare Counter increment(8) function	Counter_prepareinc	helper.callAVMMethod	[incrementCounter,[int],[8]]			
		x	call increment(8) main	Counter_sendInc	requestMethod.eth_sendTransaction	[{from:_testAcc,to:_contractAddress}]		result=>txHash	
			getRecipt/review log manually	Counter_incRpt	requestMethod.eth_getTransactionReceipt	[_txHash]			
			prepare Counter getCount function	Counter_preparegetCount	helper.callAVMMethod	[getCount]			
		x	call getCount	Counter_sendgetCount	requestMethod.eth_call	[{from:_testAcc,to:_contractAddress}]			
			validate return value//view the log for debug info	Counter_validate	validFormat	[equal,0x10]			
									
AVM recursive jar could be used for call-depth edge case									
			get blockNumber	xxxxxx	requestMethod.eth_blockNumber	[]		result=>blockNumber	
			create a log filter	cccc	requestMethod.eth_newFilter	[{fromBlock:_blockNumber,toBlock:latest}]		result=>filterId	
			prepare a avm contract named Recursive.jar	Counter_prepare	helper.newAVMContract	[testContracts/Recursive_callable_5.jar]			testAcc=0xa07e185919beef1e0a79fea78fcfabc24927c5067d758e514ad74b905a2bf137
			unlock test account	Counter_unlock	requestMethod.personal_unlockAccount	[_testAcc,password,60]			
		x	send Dapp deployment tx	Counter_deploy	requestMethod.eth_sendTransaction	[{from:_testAcc,gas:0x4c4b40}]		result=>txHash	
			get contract address	Counter_storeContractAddr	requestMethod.eth_getTransactionReceipt	[_txHash]			
			prepare recursive (11) function	Counter_prepareinc	helper.callAVMMethod	[recursive,[address,int],[_contractAddress,15]]			
		x	call recursive(11) function	Counter_sendInc	requestMethod.eth_sendTransaction	[{from:_testAcc,to:_contractAddress,gas:0x1e8480}]		result=>txHash	
			get rpt	Counter_storeContractAddr	requestMethod.eth_getTransactionReceipt	[_txHash]			
			get a filter changes	xxxx	requestMethod.eth_getFilterChanges	[_filterId]			
debug log limits									
			prepare a avm contract named demo-0.3.0.jar	demo_prepare	helper.newAVMContract	[testContracts/demo-0.3.0.jar]			testAcc=0xa07e185919beef1e0a79fea78fcfabc24927c5067d758e514ad74b905a2bf137
			unlock test account	demo_unlock	requestMethod.personal_unlockAccount	[_testAcc,password,60]			
		x	send Dapp deployment tx	demo_deploy	requestMethod.eth_sendTransaction	[{from:_testAcc,gas:0x4c4b40}]		result=>txHash	
			get contract address	demo_storeContractAddr	requestMethod.eth_getTransactionReceipt	[_txHash]			
			prepare demo function	demo_prepareMain	helper.callAVMMethod	[callExt]			
		x	call demo main	demo_call	requestMethod.eth_sendTransaction	[{from:_testAcc,to:_contractAddress}]		result=>txHash	
			get rpt	demo_validate	requestMethod.eth_getTransactionReceipt	[_txHash]			
									
									
decoder int									
			check web3 decode libs	web3-decode-int	helper.parseAVMResult	[int,0x050000000a]			
									
									
xxxx	x								
	x		xxxxxxxx	xxxx	requestMethod.eth_getBalance	[_testAcc,latest]			testAcc=0xa054340a3152d10006b66c4248cfa73e5725056294081c476c0e67ef5ad25334
	x		prepare a avm contract named Recursive.jar	Counter_prepare	helper.newAVMContract	[testContracts/Simplest.jar]			
	x		xxxxxxxx	xxxx	requestMethod.personal_unlockAccount	[_testAcc,password,60]			
	x	x	xxxxxxxx	xxxx	requestMethod.eth_sendTransaction	[{from:_testAcc,gas:200000}]		result=>txHash	
	x		xxxxxxxx	xxxx	requestMethod.eth_getTransactionReceipt	[_txHash]			
	x		xxxxxxxx	xxxx	requestMethod.eth_getBalance	[_testAcc,latest]			testAcc=0xa054340a3152d10006b66c4248cfa73e5725056294081c476c0e67ef5ad25334
